name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            dist/
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/github-audio-bot-deploy
          chmod 600 ~/.ssh/github-audio-bot-deploy
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Stop existing services
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            if [ -f docker-compose.yml ]; then
              docker-compose down || true
            fi
          EOF

      - name: Transfer built code to server
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} \
            "mkdir -p /home/saksham/Desktop/telegram-bots/audio-merger-bot"
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            Dockerfile docker-compose.yml package*.json \
            saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

      - name: Start Docker services and deploy
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            # Fix volume permissions first
            sudo chown -R 1000:1000 /var/lib/telegram-bot-api

            docker-compose up -d telegram-bot-api

            # Extended wait with service logs
            for i in {1..40}; do
              if docker-compose exec -T telegram-bot-api curl -sSf http://localhost:8081/v1/health >/dev/null; then
                echo "✅ Verified internal health check"
                break
              fi
              echo "Attempt $i/40: Waiting for service..."
              docker-compose logs --tail=20 telegram-bot-api || true
              sleep 5
            done

            docker-compose up -d audio-merger-bot
          EOF

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            echo "=== DEPLOYMENT VERIFICATION ==="
            docker-compose ps
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            docker-compose logs --tail=10 telegram-bot-api
            docker-compose logs --tail=10 audio-merger-bot
            if curl -s http://127.0.0.1:8081 > /dev/null 2>&1; then
              echo "✅ Telegram Bot API is responding on port 8081"
            else
              echo "❌ Telegram Bot API is not responding on port 8081"
            fi
          EOF
