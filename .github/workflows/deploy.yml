name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies and build
        run: |
          echo "=== Installing dependencies ==="
          npm ci

          echo "=== Building the application ==="
          npm run build

          echo "=== Build completed successfully ==="
          ls -la dist/

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/github-audio-bot-deploy
          chmod 600 ~/.ssh/github-audio-bot-deploy
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Stop existing services
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Stopping existing services ==="
            
            # Stop Docker Compose services if they exist
            if [ -f docker-compose.yml ]; then
              echo "Stopping Docker Compose services..."
              docker-compose down || true
            fi
            
            echo "‚úÖ Services stopped"
          EOF

      - name: Transfer built code to server
        run: |
          echo "=== Transferring built application to server ==="

          # Create the directory if it doesn't exist
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} \
            "mkdir -p /home/saksham/Desktop/telegram-bots/audio-merger-bot"

          # Transfer built dist folder and necessary files
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          # Transfer Docker files and package.json
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            Dockerfile docker-compose.yml package*.json \
            saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

          echo "‚úÖ Built code transferred successfully"

      - name: Setup git repository and pull latest code
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Setting up git repository ==="
            
            # Initialize git repo if it doesn't exist
            if [ ! -d .git ]; then
              echo "Initializing git repository..."
              git init
              git remote add origin https://github.com/yourusername/audio-merger-bot.git
            fi
            
            # Configure git to avoid conflicts with transferred files
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Fetch and pull latest changes (this ensures we have the latest source)
            echo "Pulling latest changes from master..."
            git fetch origin
            git reset --hard origin/master
            
            echo "‚úÖ Git repository updated"
            echo "Current commit: $(git rev-parse --short HEAD)"
            echo "Latest commit message: $(git log -1 --pretty=format:'%s')"
          EOF

      - name: Start Docker services and deploy
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Creating environment file ==="
            cat > .env << ENVEOF
            TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}
            TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            ENVEOF
            
            chmod 600 .env
            
            echo "=== Ensuring required directories exist ==="
            sudo mkdir -p /var/lib/telegram-bot-api
            sudo chown -R saksham:saksham /var/lib/telegram-bot-api
            
            echo "=== Starting Docker services ==="
            
            # Start Telegram Bot API service first
            echo "Starting Telegram Bot API service..."
            docker-compose up -d telegram-bot-api
            
            # Wait for Telegram Bot API to be ready
            echo "Waiting for Telegram Bot API to be ready..."
            for i in {1..30}; do
              if curl -s http://127.0.0.1:8081 > /dev/null 2>&1; then
                echo "‚úÖ Telegram Bot API is ready!"
                break
              fi
              echo "Attempt $i/30: Waiting for service..."
              sleep 2
            done
            
            # Now start the audio merger bot (it will use the pre-built dist folder)
            echo "Starting audio merger bot..."
            docker-compose up -d audio-merger-bot
            
            echo "=== Waiting for all services to stabilize ==="
            sleep 15
            
            echo "‚úÖ Deployment completed!"
          EOF

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo ""
            
            echo "üìÅ Deployed Files:"
            echo "Built dist folder: $(ls -la dist/ | wc -l) files"
            echo "Git status: $(git status --porcelain | wc -l) uncommitted changes"
            echo "Current commit: $(git rev-parse --short HEAD)"
            echo ""
            
            echo "üê≥ Docker Compose Status:"
            docker-compose ps
            echo ""
            
            echo "üìä Container Health:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            
            echo "üîç Service Logs (last 10 lines each):"
            echo "--- Telegram Bot API ---"
            docker-compose logs --tail=10 telegram-bot-api
            echo ""
            echo "--- Audio Merger Bot ---"
            docker-compose logs --tail=10 audio-merger-bot
            echo ""
            
            echo "üåê Port Check:"
            if curl -s http://127.0.0.1:8081 > /dev/null 2>&1; then
              echo "‚úÖ Telegram Bot API is responding on port 8081"
            else
              echo "‚ùå Telegram Bot API is not responding on port 8081"
            fi
            
            echo ""
            echo "üöÄ Deployment verification completed!"
          EOF

      - name: Cleanup old resources
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "=== Cleaning up unused Docker resources ==="
            
            # Remove unused images (keep recent ones)
            docker image prune -f --filter "until=24h" || true
            
            # Remove unused containers
            docker container prune -f || true
            
            echo "‚úÖ Cleanup completed"
          EOF
