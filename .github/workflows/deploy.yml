name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/audio_bot_deploy_key
          chmod 600 ~/.ssh/audio_bot_deploy_key

          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Ensure destination directory exists and has correct permissions
          ssh -t -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} "
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot &&
            mkdir -p dist &&
            chmod 755 dist
          "

          # Transfer built files
          scp -i ~/.ssh/audio_bot_deploy_key -r dist/* saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          # Transfer package.json
          scp -i ~/.ssh/audio_bot_deploy_key package.json saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

          # Update and restart
          ssh -t -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            git pull origin main
            npm ci --production
            
            # Setup cron job for cleanup
            (crontab -l 2>/dev/null | grep -v "audio-bot-cleanup"; echo "0 2 * * * cd /home/saksham/Desktop/telegram-bots/audio-merger-bot && npm run cleanup >> /var/log/telegram-cleanup.log 2>&1") | crontab -
            
            if pm2 describe audio-merger-bot > /dev/null 2>&1; then
              pm2 restart audio-merger-bot
            else
              pm2 start ecosystem.config.js
            fi
            
            pm2 save
            echo "Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} "pm2 status audio-merger-bot"
