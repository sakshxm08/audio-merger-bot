name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/github-audio-bot-deploy
          chmod 600 ~/.ssh/github-audio-bot-deploy
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create environment file
        run: |
          cat > .env.production << EOF
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          LOCAL_TELEGRAM_API_ROOT=http://127.0.0.1:8081
          FFMPEG_PATH=/usr/bin/ffmpeg
          FFPROBE_PATH=/usr/bin/ffprobe
          CLEANUP_DIRECTORY=/var/lib/telegram-bot-api
          CLEANUP_INTERVAL_HOURS=24
          NODE_ENV=production
          EOF

      - name: Fix server permissions and prepare deployment
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "=== Fixing permissions and preparing deployment ==="
            
            # Stop PM2 process first to release file locks
            if pm2 describe audio-merger-bot > /dev/null 2>&1; then
              echo "Stopping PM2 process..."
              pm2 stop audio-merger-bot || true
              pm2 delete audio-merger-bot || true
            fi
            
            # Navigate to project directory
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot || exit 1
            
            # Fix git repository permissions
            echo "Fixing git repository permissions..."
            sudo chown -R saksham:saksham .git/ 2>/dev/null || true
            chmod -R u+w .git/ 2>/dev/null || true
            
            # Completely remove node_modules with force
            echo "Removing node_modules with proper permissions..."
            sudo rm -rf node_modules/ 2>/dev/null || true
            rm -rf package-lock.json 2>/dev/null || true
            
            # Fix directory ownership
            sudo chown -R saksham:saksham /home/saksham/Desktop/telegram-bots/audio-merger-bot/ 2>/dev/null || true
            
            # Create necessary directories
            mkdir -p logs dist
            
            echo "‚úì Permissions fixed and environment prepared"
          EOF

      - name: Deploy files to server
        run: |
          # Transfer built files
          echo 'Transferring built files...'
          rsync -avz --delete -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          # Transfer configuration and environment files
          echo 'Transferring configuration files...'
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            package.json ecosystem.config.js .env.production \
            saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

      - name: Install dependencies and configure environment
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no -o ConnectTimeout=60 saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Installing production dependencies ==="
            # Clean install without removing existing files
            npm install --production --no-audit --no-fund --force || {
              echo "First install failed, trying alternative approach..."
              npm cache clean --force
              npm install --production --no-audit --no-fund --legacy-peer-deps
            }
            
            # Configure environment
            if [ -f .env.production ]; then
              mv .env.production .env
              echo "‚úì Environment file configured"
            fi
            
            # Fix any remaining permission issues
            chmod -R u+w . 2>/dev/null || true
            
            echo "=== Dependencies installation completed ==="
          EOF

      - name: Setup system services
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Setting up system services ==="
            
            # Setup cleanup cron job
            if ! crontab -l 2>/dev/null | grep -q 'audio-merger-bot.*cleanup'; then
              (crontab -l 2>/dev/null; echo '0 2 * * * cd /home/saksham/Desktop/telegram-bots/audio-merger-bot && npm run cleanup >> /var/log/telegram-cleanup.log 2>&1') | crontab -
              echo "‚úì Cleanup cron job added"
            else
              echo "‚úì Cleanup cron job already exists"
            fi
            
            # Create log directory (without sudo to avoid permission issues)
            touch ./telegram-cleanup.log 2>/dev/null || true
            
            echo "=== System services setup completed ==="
          EOF

      - name: Check FFmpeg and start PM2 process
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Checking FFmpeg installation ==="
            
            # Check FFmpeg installation and codecs
            if command -v ffmpeg >/dev/null 2>&1; then
              echo "‚úì FFmpeg found at: $(which ffmpeg)"
              echo "Checking MP3 codec support..."
              if ffmpeg -codecs 2>/dev/null | grep -q "libmp3lame"; then
                echo "‚úì libmp3lame codec available"
              else
                echo "‚ö†Ô∏è  libmp3lame codec not found - installing..."
                sudo apt update && sudo apt install -y ffmpeg || echo "FFmpeg installation failed"
              fi
            else
              echo "‚ùå FFmpeg not found - installing..."
              sudo apt update && sudo apt install -y ffmpeg || echo "FFmpeg installation failed"
            fi
            
            echo "=== Starting PM2 process ==="
            
            # Ensure PM2 is available
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2 || sudo npm install -g pm2
            fi
            
            # Start fresh PM2 process
            echo "üöÄ Starting audio-merger-bot with PM2..."
            pm2 start ecosystem.config.js --env production
            
            # Save PM2 configuration
            pm2 save
            
            echo "‚úÖ PM2 process started successfully!"
          EOF

      - name: Verify deployment and show status
        run: |
          echo "‚è≥ Waiting for process to initialize..."
          sleep 15

          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo ""
            
            echo "üìä PM2 Status:"
            pm2 status audio-merger-bot || echo "‚ùå PM2 status check failed"
            echo ""
            
            echo "üîç Process Check:"
            if ps aux | grep -E 'node.*audio-merger-bot' | grep -v grep; then
              echo "‚úÖ Audio merger bot process is running"
            else
              echo "‚ùå No audio merger bot process found"
            fi
            echo ""
            
            echo "üìù Recent Logs (last 15 lines):"
            pm2 logs audio-merger-bot --lines 15 --nostream 2>/dev/null || echo "‚ö†Ô∏è  No logs available yet"
            echo ""
            
            echo "üéµ FFmpeg Codec Check:"
            if ffmpeg -codecs 2>/dev/null | grep -q "libmp3lame"; then
              echo "‚úÖ MP3 encoding support available"
            else
              echo "‚ùå MP3 encoding support missing"
            fi
            echo ""
            
            echo "üê≥ Docker Telegram Bot API Status:"
            if command -v docker >/dev/null 2>&1; then
              if docker ps 2>/dev/null | grep -q "8081.*8081"; then
                echo "‚úÖ Telegram Bot API container is running on port 8081"
              else
                echo "‚ö†Ô∏è  Telegram Bot API container not found"
                echo "Start with: docker run -d -p 8081:8081 --env TELEGRAM_API_ID=YOUR_API_ID --env TELEGRAM_API_HASH=YOUR_API_HASH tdlight/tdlightbotapi"
              fi
            else
              echo "‚ÑπÔ∏è  Docker not accessible or not installed"
            fi
            echo ""
            
            echo "üéØ Deployment Summary:"
            echo "‚úÖ Permissions fixed"
            echo "‚úÖ Code deployed"
            echo "‚úÖ Dependencies installed"
            echo "‚úÖ PM2 process started"
            echo "‚úÖ Cron job configured"
            echo "‚úÖ Environment configured for production"
            echo ""
            echo "üöÄ Audio Merger Bot deployment completed!"
          EOF

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
