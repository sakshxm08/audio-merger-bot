name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/github-audio-bot-deploy
          chmod 600 ~/.ssh/github-audio-bot-deploy
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create environment file
        run: |
          cat > .env.production << EOF
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          LOCAL_TELEGRAM_API_ROOT=http://127.0.0.1:8081
          FFMPEG_PATH=/usr/bin/ffmpeg
          FFPROBE_PATH=/usr/bin/ffprobe
          CLEANUP_DIRECTORY=/var/lib/telegram-bot-api
          CLEANUP_INTERVAL_HOURS=24
          NODE_ENV=production
          EOF

      - name: Stop services and prepare for deployment
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "=== Stopping services and preparing for deployment ==="
            
            # Stop PM2 process first
            if pm2 describe audio-merger-bot > /dev/null 2>&1; then
              echo "Stopping PM2 process..."
              pm2 stop audio-merger-bot || true
              pm2 delete audio-merger-bot || true
            fi
            
            # Navigate to project directory
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot || exit 1
            
            echo "‚úì Services stopped and ready for deployment"
          EOF

      - name: Pull latest code from repository
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Pulling latest code ==="
            
            # Fix ownership first
            sudo chown -R saksham:saksham /home/saksham/Desktop/telegram-bots/audio-merger-bot/
            
            # Get current commit for comparison
            CURRENT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
            echo "Current commit: $CURRENT_COMMIT"
            
            # Pull as the saksham user (not root)
            git pull origin master
            
            # Verify the update
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "New commit: $NEW_COMMIT"
            
            if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
              echo "‚úÖ Code updated successfully from $CURRENT_COMMIT to $NEW_COMMIT"
            else
              echo "‚ÑπÔ∏è  Code was already up to date"
            fi
            
            # Show current file structure
            echo "Current file structure:"
            ls -la src/ 2>/dev/null || echo "src directory not found"
          EOF

      - name: Deploy built files and configurations
        run: |
          echo 'Transferring built files and configurations...'

          # Transfer all source files (to ensure complete modular structure)
          rsync -avz --delete -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            src/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/src/

          # Transfer built files
          rsync -avz --delete -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          # Transfer configuration files
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            package.json ecosystem.config.js .env.production tsconfig.json \
            saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

      - name: Fix permissions and install dependencies
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Fixing permissions ==="
            # Fix ownership and permissions
            sudo chown -R saksham:saksham /home/saksham/Desktop/telegram-bots/audio-merger-bot/
            chmod -R 755 /home/saksham/Desktop/telegram-bots/audio-merger-bot/
            
            # Clean old installations
            sudo rm -rf node_modules package-lock.json 2>/dev/null || true
            
            echo "=== Installing dependencies ==="
            # Install with sudo to avoid permission issues
            sudo npm install --production --no-audit --no-fund --unsafe-perm --allow-root || {
              echo "Sudo install failed, trying alternative..."
              npm cache clean --force
              npm install --production --no-audit --no-fund --legacy-peer-deps
            }
            
            # Fix ownership after installation
            sudo chown -R saksham:saksham /home/saksham/Desktop/telegram-bots/audio-merger-bot/
            
            # Configure environment
            if [ -f .env.production ]; then
              mv .env.production .env
              echo "‚úì Environment file configured"
            fi
            
            echo "=== Verifying new file structure ==="
            echo "Source files:"
            find src/ -name "*.ts" | head -10
            echo "Built files:"
            find dist/ -name "*.js" | head -10
            
            echo "‚úÖ Dependencies and structure updated"
          EOF

      - name: Start PM2 process
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Starting PM2 process ==="
            
            # Ensure PM2 is available
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # Start fresh PM2 process
            echo "üöÄ Starting audio-merger-bot with PM2..."
            pm2 start ecosystem.config.js --env production
            
            # Save PM2 configuration
            pm2 save
            
            echo "‚úÖ PM2 process started successfully!"
          EOF

      - name: Verify deployment
        run: |
          echo "‚è≥ Waiting for process to initialize..."
          sleep 15

          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo ""
            
            echo "üìä PM2 Status:"
            pm2 status audio-merger-bot
            echo ""
            
            echo "üîç Git Status:"
            echo "Current commit: $(git rev-parse HEAD)"
            echo "Current branch: $(git branch --show-current)"
            echo ""
            
            echo "üìÅ File Structure Verification:"
            echo "Source structure:"
            ls -la src/
            echo ""
            echo "Services directory:"
            ls -la src/services/ 2>/dev/null || echo "Services directory not found"
            echo ""
            
            echo "üìù Recent Logs:"
            pm2 logs audio-merger-bot --lines 10 --nostream 2>/dev/null || echo "No logs available yet"
            echo ""
            
            echo "üöÄ Deployment completed!"
          EOF
