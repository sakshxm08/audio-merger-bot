name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/audio_bot_deploy_key
          chmod 600 ~/.ssh/audio_bot_deploy_key
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy files to server
        run: |
          # Create directory structure
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} "
            mkdir -p /home/saksham/Desktop/telegram-bots/audio-merger-bot/dist
          "

          # Use rsync for reliable file transfer
          rsync -avz --delete -e "ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          rsync -avz -e "ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no" \
            package.json saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

          rsync -avz -e "ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no" \
            ecosystem.config.js saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

      - name: Cleanup processes
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 saksham@${{ secrets.DEPLOY_HOST }} "
            sudo pkill -f 'PM2.*God Daemon' || true &&
            sudo rm -rf /root/.pm2 || true &&
            pgrep -f 'node.*audio-merger-bot/dist' | xargs -r kill || true &&
            pm2 delete audio-merger-bot 2>/dev/null || true &&
            sleep 5
          "

      - name: Clear logs
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 saksham@${{ secrets.DEPLOY_HOST }} "
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot &&
            rm -f ~/.pm2/logs/audio-merger-bot-*.log || true &&
            rm -f logs/out-0.log logs/err-0.log || true
          "

      - name: Update code and dependencies
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=120 saksham@${{ secrets.DEPLOY_HOST }} "
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot &&
            timeout 60 git pull origin master &&
            timeout 120 npm ci --production
          "

      - name: Setup cron job
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 saksham@${{ secrets.DEPLOY_HOST }} "
            if ! crontab -l 2>/dev/null | grep -q 'npm run cleanup'; then
              (crontab -l 2>/dev/null; echo '0 2 * * * cd /home/saksham/Desktop/telegram-bots/audio-merger-bot && npm run cleanup >> /var/log/telegram-cleanup.log 2>&1') | crontab -
            fi
          "

      - name: Start PM2
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=60 saksham@${{ secrets.DEPLOY_HOST }} "
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot &&
            pm2 start ecosystem.config.js &&
            pm2 save
          "

      - name: Final cleanup
        run: |
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 saksham@${{ secrets.DEPLOY_HOST }} "
            sleep 3 &&
            sudo pkill -f 'node.*audio-merger-bot' -u root || true &&
            echo 'Clean deployment completed successfully!'
          "

      - name: Verify deployment
        run: |
          # Wait for process to fully start
          sleep 8
          ssh -i ~/.ssh/audio_bot_deploy_key -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} "
            echo 'PM2 Status:' &&
            pm2 status audio-merger-bot &&
            echo '' &&
            echo 'Process Check:' &&
            ps aux | grep -E 'node.*audio-merger-bot' | grep -v grep &&
            echo '' &&
            echo 'Recent Logs:' &&
            pm2 logs audio-merger-bot --lines 5 --nostream
          "
