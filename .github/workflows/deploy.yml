name: Deploy Audio Merger Bot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy audio merger bot to antiX server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_AUDIO_BOT }}" > ~/.ssh/github-audio-bot-deploy
          chmod 600 ~/.ssh/github-audio-bot-deploy
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create environment file
        run: |
          cat > .env.production << EOF
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          LOCAL_TELEGRAM_API_ROOT=http://127.0.0.1:8081
          FFMPEG_PATH=/usr/bin/ffmpeg
          FFPROBE_PATH=/usr/bin/ffprobe
          CLEANUP_DIRECTORY=/var/lib/telegram-bot-api
          CLEANUP_INTERVAL_HOURS=24
          NODE_ENV=production
          EOF

      - name: Deploy files to server
        run: |
          # Create directory structure if it doesn't exist
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} "
            mkdir -p /home/saksham/Desktop/telegram-bots/audio-merger-bot/{dist,logs}
            echo 'Directory structure created'
          "

          # Transfer built files
          echo 'Transferring built files...'
          rsync -avz --delete -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            dist/ saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/dist/

          # Transfer configuration and environment files
          echo 'Transferring configuration files...'
          rsync -avz -e "ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no" \
            package.json ecosystem.config.js .env.production \
            saksham@${{ secrets.DEPLOY_HOST }}:/home/saksham/Desktop/telegram-bots/audio-merger-bot/

      - name: Pull latest code and install dependencies
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no -o ConnectTimeout=60 saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Pulling latest code ==="
            # Initialize git repo if it doesn't exist
            if [ ! -d .git ]; then
              echo "Initializing git repository..."
              git init
              git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO_NAME.git
            fi
            
            # Pull latest code with timeout
            timeout 60 git fetch origin master || echo "Git fetch failed or timed out"
            timeout 60 git reset --hard origin/master || echo "Git reset failed, using uploaded files"
            
            echo "=== Installing production dependencies ==="
            # Remove node_modules to ensure clean install
            rm -rf node_modules package-lock.json
            timeout 120 npm install --production --no-audit --no-fund || {
              echo "npm install failed, retrying..."
              timeout 120 npm install --production --force
            }
            
            # Rename environment file
            if [ -f .env.production ]; then
              mv .env.production .env
              echo "Environment file configured"
            fi
            
            echo "=== Dependencies installation completed ==="
          EOF

      - name: Setup system services and cron
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Setting up cleanup cron job ==="
            # Setup cleanup cron job if it doesn't exist
            if ! crontab -l 2>/dev/null | grep -q 'audio-merger-bot.*cleanup'; then
              (crontab -l 2>/dev/null; echo '0 2 * * * cd /home/saksham/Desktop/telegram-bots/audio-merger-bot && npm run cleanup >> /var/log/telegram-cleanup.log 2>&1') | crontab -
              echo "‚úì Cleanup cron job added"
            else
              echo "‚úì Cleanup cron job already exists"
            fi
            
            # Ensure log directory exists
            sudo mkdir -p /var/log
            sudo touch /var/log/telegram-cleanup.log
            sudo chown saksham:saksham /var/log/telegram-cleanup.log 2>/dev/null || true
            
            echo "=== System services setup completed ==="
          EOF

      - name: Restart PM2 process
        run: |
          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== Managing PM2 process ==="
            
            # Check if PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found, installing..."
              npm install -g pm2
            fi
            
            # Stop existing process if running
            if pm2 describe audio-merger-bot > /dev/null 2>&1; then
              echo "üîÑ Stopping existing audio-merger-bot process..."
              pm2 stop audio-merger-bot
              pm2 delete audio-merger-bot
              echo "‚úì Existing process stopped and removed"
            else
              echo "‚ÑπÔ∏è  No existing process found"
            fi
            
            # Start fresh process
            echo "üöÄ Starting audio-merger-bot with PM2..."
            pm2 start ecosystem.config.js
            
            # Save PM2 configuration
            pm2 save
            
            # Setup PM2 startup script
            pm2 startup systemd -u saksham --hp /home/saksham > /dev/null 2>&1 || true
            
            echo "‚úÖ PM2 process restarted successfully!"
          EOF

      - name: Verify deployment and show status
        run: |
          # Wait for process to fully start
          echo "‚è≥ Waiting for process to initialize..."
          sleep 10

          ssh -i ~/.ssh/github-audio-bot-deploy -o StrictHostKeyChecking=no saksham@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/saksham/Desktop/telegram-bots/audio-merger-bot
            
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo ""
            
            echo "üìä PM2 Status:"
            pm2 status audio-merger-bot || echo "‚ùå PM2 status check failed"
            echo ""
            
            echo "üîç Process Check:"
            if ps aux | grep -E 'node.*audio-merger-bot' | grep -v grep; then
              echo "‚úÖ Audio merger bot process is running"
            else
              echo "‚ùå No audio merger bot process found"
            fi
            echo ""
            
            echo "üìù Recent Logs (last 10 lines):"
            pm2 logs audio-merger-bot --lines 10 --nostream 2>/dev/null || echo "‚ö†Ô∏è  No logs available yet"
            echo ""
            
            echo "üíæ Memory Usage:"
            pm2 monit --lines 1 2>/dev/null | head -5 || echo "Memory info not available"
            echo ""
            
            echo "üê≥ Docker Telegram Bot API Status:"
            if docker ps | grep -q "8081.*8081"; then
              echo "‚úÖ Telegram Bot API container is running on port 8081"
            else
              echo "‚ö†Ô∏è  Telegram Bot API container not found - make sure to start it manually"
              echo "Run: docker run -d -p 8081:8081 --env TELEGRAM_API_ID=YOUR_API_ID --env TELEGRAM_API_HASH=YOUR_API_HASH tdlight/tdlightbotapi"
            fi
            echo ""
            
            echo "üéØ Deployment Summary:"
            echo "‚úÖ Code updated from repository"
            echo "‚úÖ Dependencies installed"
            echo "‚úÖ PM2 process restarted"
            echo "‚úÖ Cron job configured"
            echo "‚úÖ Environment configured for production"
            echo ""
            echo "üöÄ Audio Merger Bot deployment completed successfully!"
          EOF

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
